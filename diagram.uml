@startuml

!theme aws-orange
!theme plain

set namespaceSeparator ::

abstract class "core::State Listeners::ConnectivityStateListener" {
  +void onConnectivityChanged()
}

abstract class "core::Domain::BaseRepository" {
  +BaseMapper<BaseEntity, BaseModel> mapper
  +BaseDataSource dataSource
}

"core::Domain::BaseRepository" o-- "core::Domain::Base Mapper::BaseMapper<BaseEntity, BaseModel>"
"core::Domain::BaseRepository" o-- "core::Domain::BaseDataSource"

abstract class "core::Domain::Base Mapper::BaseMapper" {
  +M toModel()
  +E toEntity()
}

abstract class "core::Domain::BaseModel" {
}

abstract class "core::Domain::::BaseService" {
  +BaseRepository repository
}

"core::Domain::::BaseService" o-- "core::Domain::BaseRepository"

abstract class "core::Domain::BaseDataSource" {
}

abstract class "core::Domain::BaseEntity" {
}

class "Market Ticks::data::TickStreamRepoistory" {
  +Stream<TickStreamEntity> getTickStream()
}

"core::Domain::BaseRepository" <|-- "Market Ticks::data::TickStreamRepoistory"

class "Market Ticks::data::TickStreamModel" {
  +double ask
  +double bid
  +int epoch
  +String id
  +int pipSize
  +double quote
  +String symbol
}

"core::Domain::BaseModel" <|-- "Market Ticks::data::TickStreamModel"

class "Market Ticks::data::TickStreamMapper" {
  +TickStreamModel toModel()
  +TickStreamEntity toEntity()
}

"core::Domain::Base Mapper::BaseMapper" <|-- "Market Ticks::data::TickStreamMapper"

class "Market Ticks::data::TickStreamDataSource" {
  +Stream<Map<String, dynamic>> getTickStream()
}

"core::Domain::BaseDataSource" <|-- "Market Ticks::data::TickStreamDataSource"

class "Market Ticks::Presentation::TickStreamService" {
  +Stream<TickStreamEntity> getTickStream()
}

"core::Domain::::BaseService" <|-- "Market Ticks::Presentation::TickStreamService"

class "Market Ticks::Presentation::TickStreamWidget" {
  +TickStreamEntity entity
}

"Market Ticks::Presentation::TickStreamWidget" o-- "Market Ticks::Presentation::TickStreamEntity"

class "Market Ticks::Presentation::State::TickStreamCubitExtended" {
  +void onConnectivityChanged()
}

"Market Ticks::Presentation::State::TickStreamCubit" <|-- "Market Ticks::Presentation::State::TickStreamCubitExtended"
"core::State Listeners::ConnectivityStateListener" <|-- "Market Ticks::Presentation::State::TickStreamCubitExtended"

class "Market Ticks::Presentation::TickStreamEntity" {
  +double ask
  +double bid
  +int epoch
  +String id
  +int pipSize
  +double quote
  +String symbol
}

"core::Domain::BaseEntity" <|-- "Market Ticks::Presentation::TickStreamEntity"

class "Market Ticks::Presentation::State::TickStreamCubit" {
  +TickStreamService service
  +void getTickStream()
}

"Market Ticks::Presentation::State::TickStreamCubit" o-- "Market Ticks::Presentation::TickStreamService"

abstract class "Market Ticks::Presentation::State::TickStreamState" {
}

class "Market Ticks::Presentation::State::TickStreamInitialState" {
}

"Market Ticks::Presentation::State::TickStreamState" <|-- "Market Ticks::Presentation::State::TickStreamInitialState"

class "Market Ticks::Presentation::State::TickStreamLoadingState" {
}

"Market Ticks::Presentation::State::TickStreamState" <|-- "Market Ticks::Presentation::State::TickStreamLoadingState"

class "Market Ticks::Presentation::State::TickStreamLoadedState" {
  +TickStreamEntity tick
}

"Market Ticks::Presentation::State::TickStreamLoadedState" o-- "Market Ticks::Presentation::TickStreamEntity"
"Market Ticks::Presentation::State::TickStreamState" <|-- "Market Ticks::Presentation::State::TickStreamLoadedState"

class "Market Ticks::Presentation::State::TickStreamErrorState" {
  +String message
}

"Market Ticks::Presentation::State::TickStreamState" <|-- "Market Ticks::Presentation::State::TickStreamErrorState"

class "Market Ticks::Presentation::TickStreamPage" {
}

"Market Ticks::Presentation::TickStreamPage" o-- "Market Ticks::Presentation::TickStreamWidget"
"Market Ticks::Presentation::TickStreamPage" o-- "Market Ticks::Presentation::State::TickStreamCubitExtended"

"Market Ticks::Presentation::State::TickStreamCubit" o-- "Market Ticks::Presentation::State::TickStreamState"

@enduml
